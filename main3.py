import asyncio
import logging
import json
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext
from aiohttp import ClientSession, CookieJar
from bs4 import BeautifulSoup

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7690678050:AAGBwTdSUNgE7Q6Z2LpE6481vvJJhetrO-4"

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–π
USERS_FILE = "users.txt"

# –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ ID
ALLOWED_USER_IDS = [1811568463, 630965641]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {}
user_tasks = {}

# –§—É–Ω–∫—Ü–∏—è–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_message(update: Update, text: str):
    await update.message.reply_text(text, parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç Cobalt, —è —Å–æ–∑–¥–∞–Ω –¥–ª—è –∏–≥—Ä—ã –£–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ü–∏—Ç–æ–º—Ü—ã –Ω–∞ —Å–∞–π—Ç–µ mpets.mobi, –±–ª–∞–≥–æ–¥–∞—Ä—è –º–Ω–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ (–∞ –º–æ–∂–µ—Ç –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ) –Ω–∞ '–ø—Ä–æ–∫–∞—á–∫—É', —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏–ª–æ—Å—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –∏–≥—Ä—É.\n"
                                    "–í—Å–µ –¥–µ–ª–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: –ö–æ—Ä–º–ª–µ–Ω–∏–µ, –ò–≥—Ä–∞, –í—ã—Å—Ç–∞–≤–∫–∞, –ü—Ä–æ–≥—É–ª–∫–∞, –ü–æ–∏—Å–∫ —Å–µ–º—è–Ω.\n"
                                    "–ü—Ä–æ—à—É –∑–∞–º–µ—Ç–∏—Ç—å, –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–∏—Ç–æ–º—Ü–∞ –≤ –±–æ—Ç —Ç—Ä–µ–±—É—é—Ç—Å—è cookie, –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∏—Ö —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –≤ /guide.\n"
                                    "–û–∑–Ω–∞–∫–æ–º—å—Å—è —Å –º–æ–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏:\n"
                                    "/info - –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
                                    "/guide - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é cookie\n"
                                    "/add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é\n"
                                    "/del - —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é\n"
                                    "/list - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏\n"
                                    "/on - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é\n"
                                    "/off - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é\n"
                                    "/stats <–∏–º—è_—Å–µ—Å—Å–∏–∏> - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∏—Ç–æ–º—Ü–∞\n\n"
                                    "Cobalt —Å–¥–µ–ª–∞–Ω –Ω–∞ ChatGPT 4o mini. –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É!")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def read_from_file():
    if not os.path.exists(USERS_FILE):
        return []

    with open(USERS_FILE, "r") as file:
        lines = file.readlines()

    sessions = []
    for line in lines:
        session_data = line.strip().split(" | ")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        if len(session_data) != 4:
            logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–∞–π–ª–µ: {line.strip()}")
            continue

        try:
            cookies = json.loads(session_data[3])  # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫—É–∫–∏
        except json.JSONDecodeError:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON –¥–ª—è —Å–µ—Å—Å–∏–∏: {session_data[0]}")
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏

        sessions.append({
            "session_name": session_data[0],
            "owner": session_data[1],
            "user_id": int(session_data[2]),
            "cookies": cookies
        })

    return sessions
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def write_to_file(session_name, owner, user_id, cookies):
    with open(USERS_FILE, "a") as file:
        cookies_json = json.dumps(cookies)
        file.write(f"{session_name} | {owner} | {user_id} | {cookies_json}\n")
    logging.info(f"–°–µ—Å—Å–∏—è {session_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ñ–∞–π–ª.")

def load_sessions():
    global user_sessions
    sessions = read_from_file()
    for session in sessions:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º cookies –≤ —Å–ª–æ–≤–∞—Ä—å
        cookies = convert_cookies_to_dict(session["cookies"]) if isinstance(session["cookies"], list) else session["cookies"]
        
        user_sessions.setdefault(session["user_id"], {})[session["session_name"]] = {
            "owner": session["owner"],
            "cookies": cookies,
            "active": False
        }


def convert_cookies_to_dict(cookies_list):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –∫—É–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å
    cookies_dict = {cookie['name']: cookie['value'] for cookie in cookies_list}
    return cookies_dict

# –ö–æ–º–∞–Ω–¥–∞ /info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ –∏ –∫–∞–Ω–∞–ª–µ
async def info(update: Update, context: CallbackContext):
    message = (
        "–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º: [t.me/bakhusse](https://t.me/bakhusse)\n"
        "–¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª: [t.me/cobalt_mpets](https://t.me/cobalt_mpets)"
    )
    await update.message.reply_text(message, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /guide - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –∫—É–∫–∏
async def guide(update: Update, context: CallbackContext):
    message = (
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –∫—É–∫–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ.\n"
        "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! üîú"
    )
    await update.message.reply_text(message)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
async def add_session(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    try:
        if len(context.args) < 2:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add <–∏–º—è_—Å–µ—Å—Å–∏–∏> <–∫—É–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON>")
            return

        session_name = context.args[0]
        cookies_json = " ".join(context.args[1:])
        
        cookies = json.loads(cookies_json)
        if not cookies:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—É–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ JSON.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –∏ –∫—É–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in user_sessions:
            user_sessions[user_id] = {}

        if session_name in user_sessions[user_id]:
            await update.message.reply_text(f"–°–µ—Å—Å–∏—è —Å –∏–º–µ–Ω–µ–º {session_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        else:
            user_sessions[user_id][session_name] = {
                "owner": update.message.from_user.username,
                "cookies": cookies,
                "active": False
            }

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
            write_to_file(session_name, update.message.from_user.username, user_id, cookies)
            await update.message.reply_text(f"–°–µ—Å—Å–∏—è {session_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            logging.info(f"–°–µ—Å—Å–∏—è {session_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.username}.")

    except json.JSONDecodeError:
        await update.message.reply_text("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫—É–∫–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.")
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
async def remove_session(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /del <–∏–º—è_—Å–µ—Å—Å–∏–∏>")
        return

    session_name = context.args[0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–µ—Å—Å–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_sessions and session_name in user_sessions[user_id]:
        session = user_sessions[user_id][session_name]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
        if session["active"]:
            await update.message.reply_text(f"–°–µ—Å—Å–∏—è {session_name} –∞–∫—Ç–∏–≤–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π /off.")
            return

        # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞
        user_sessions[user_id].pop(session_name)

        # –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª, —É–¥–∞–ª—è—è —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
        sessions = read_from_file()
        new_sessions = [session for session in sessions if session['session_name'] != session_name]

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π –≤ —Ñ–∞–π–ª
        with open(USERS_FILE, "w") as file:
            for session in new_sessions:
                cookies_json = json.dumps(session['cookies'])
                file.write(f"{session['session_name']} | {session['owner']} | {session['user_id']} | {cookies_json}\n")

        await update.message.reply_text(f"–°–µ—Å—Å–∏—è {session_name} —É–¥–∞–ª–µ–Ω–∞.")
        logging.info(f"–°–µ—Å—Å–∏—è {session_name} —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.username}.")
    else:
        await update.message.reply_text(f"–°–µ—Å—Å–∏—è —Å –∏–º–µ–Ω–µ–º {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def list_sessions(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id in user_sessions and user_sessions[user_id]:
        session_list = "\n".join([f"{name} - {'–ê–∫—Ç–∏–≤–Ω–∞' if session['active'] else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}"
                                 for name, session in user_sessions[user_id].items()])
        await update.message.reply_text(f"–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏:\n{session_list}")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def activate_session(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /on <–∏–º—è_—Å–µ—Å—Å–∏–∏> –∏–ª–∏ /on all")
        return

    session_name = context.args[0]

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç "all", –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏
    if session_name == "all":
        if user_id in user_sessions and user_sessions[user_id]:
            # –î–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø–µ—Ä–µ—Ö–æ–¥–∞
            for name, session in user_sessions[user_id].items():
                if not session["active"]:
                    session["active"] = True
                    logging.info(f"–°–µ—Å—Å–∏—è {name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–∞–º
                    task = asyncio.create_task(auto_actions(session["cookies"], name))
                    user_tasks[(user_id, name)] = task  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Ç–º–µ–Ω—ã
            await update.message.reply_text("–í—Å–µ —Å–µ—Å—Å–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É!")
        else:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")
    else:
        # –ò–Ω–∞—á–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–µ—Å—Å–∏—é
        if user_id in user_sessions and session_name in user_sessions[user_id]:
            user_sessions[user_id][session_name]["active"] = True
            await update.message.reply_text(f"–°–µ—Å—Å–∏—è {session_name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏
            task = asyncio.create_task(auto_actions(user_sessions[user_id][session_name]["cookies"], session_name))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ—Ç–º–µ–Ω—ã
            user_tasks[(user_id, session_name)] = task
        else:
            await update.message.reply_text(f"–°–µ—Å—Å–∏—è —Å –∏–º–µ–Ω–µ–º {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def deactivate_session(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /off <–∏–º—è_—Å–µ—Å—Å–∏–∏> –∏–ª–∏ /off all")
        return

    session_name = context.args[0]

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç "all", –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏
    if session_name == "all":
        if user_id in user_sessions and user_sessions[user_id]:
            for name, session in user_sessions[user_id].items():
                if session["active"]:
                    session["active"] = False
                    task = user_tasks.get((user_id, name))
                    if task:
                        task.cancel()
                        del user_tasks[(user_id, name)]
                    logging.info(f"–°–µ—Å—Å–∏—è {name} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
            await update.message.reply_text("–í—Å–µ —Å–µ—Å—Å–∏–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!")
        else:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")
    else:
        # –ò–Ω–∞—á–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–µ—Å—Å–∏—é
        if user_id in user_sessions and session_name in user_sessions[user_id]:
            user_sessions[user_id][session_name]["active"] = False
            await update.message.reply_text(f"–°–µ—Å—Å–∏—è {session_name} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
            
            # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–º–µ–Ω—è–µ–º –µ—ë
            task = user_tasks.get((user_id, session_name))
            if task:
                task.cancel()
                del user_tasks[(user_id, session_name)]
                logging.info(f"–ó–∞–¥–∞—á–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_name} –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            else:
                logging.warning(f"–ó–∞–¥–∞—á–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        else:
            await update.message.reply_text(f"–°–µ—Å—Å–∏—è —Å –∏–º–µ–Ω–µ–º {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ —Å–µ—Å—Å–∏–∏
async def activate_other_session(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id not in ALLOWED_USER_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /aon <–∏–º—è_—Å–µ—Å—Å–∏–∏>")
        return

    session_name = context.args[0]

    # –ò—â–µ–º —Å–µ—Å—Å–∏—é –ø–æ –∏–º–µ–Ω–∏ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    target_user_id = None
    for uid, sessions in user_sessions.items():
        if session_name in sessions:
            target_user_id = uid
            break

    if target_user_id is None:
        await update.message.reply_text(f"–°–µ—Å—Å–∏—è —Å –∏–º–µ–Ω–µ–º {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_sessions[target_user_id][session_name]["active"] = True
    await update.message.reply_text(f"–°–µ—Å—Å–∏—è {session_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏
    task = asyncio.create_task(auto_actions(user_sessions[target_user_id][session_name]["cookies"], session_name))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ—Ç–º–µ–Ω—ã
    user_tasks[(target_user_id, session_name)] = task

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ —Å–µ—Å—Å–∏–∏
async def deactivate_other_session(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id not in ALLOWED_USER_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /aoff <–∏–º—è_—Å–µ—Å—Å–∏–∏>")
        return

    session_name = context.args[0]

    # –ò—â–µ–º —Å–µ—Å—Å–∏—é –ø–æ –∏–º–µ–Ω–∏ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    target_user_id = None
    for uid, sessions in user_sessions.items():
        if session_name in sessions:
            target_user_id = uid
            break

    if target_user_id is None:
        await update.message.reply_text(f"–°–µ—Å—Å–∏—è —Å –∏–º–µ–Ω–µ–º {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_sessions[target_user_id][session_name]["active"] = False
    await update.message.reply_text(f"–°–µ—Å—Å–∏—è {session_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")

    # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–º–µ–Ω—è–µ–º –µ—ë
    task = user_tasks.get((target_user_id, session_name))
    if task:
        task.cancel()
        del user_tasks[(target_user_id, session_name)]
        logging.info(f"–ó–∞–¥–∞—á–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        logging.warning(f"–ó–∞–¥–∞—á–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ —Å–µ—Å—Å–∏–∏
async def get_user(update: Update, context: CallbackContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    user_id = update.message.from_user.id
    if user_id not in ALLOWED_USER_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /get_user <–∏–º—è_—Å–µ—Å—Å–∏–∏>")
        return

    session_name = context.args[0]

    session_info = read_from_file()
    for session in session_info:
        if session["session_name"] == session_name:
            response = f"–°–µ—Å—Å–∏—è: {session_name}\n"
            response += f"–í–ª–∞–¥–µ–ª–µ—Ü: {session['owner']}\n"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—É–∫–∏ –∫–∞–∫ —Å–∫—Ä—ã—Ç—ã–π –±–ª–æ–∫
            cookies = json.dumps(session['cookies'], indent=4)  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—É–∫–∏ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            hidden_cookies = f"```json\n{cookies}```"  # –°–∫—Ä—ã–≤–∞–µ–º –∫—É–∫–∏ –≤ –±–ª–æ–∫–µ, –¥–æ—Å—Ç—É–ø–Ω–æ–º –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è

            response += f"–ö—É–∫–∏:\n {hidden_cookies}"  # –î–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É —Å –∫—É–∫–∞–º–∏

            await send_message(update, response)
            return

    await update.message.reply_text(f"–°–µ—Å—Å–∏—è —Å –∏–º–µ–Ω–µ–º {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user_sessions(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id not in ALLOWED_USER_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /get_list <user_id> –∏–ª–∏ /get_list <–∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>")
        return

    target = context.args[0]

    # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if target.isdigit():
        target_user_id = int(target)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–µ—Å—Å–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if target_user_id in user_sessions and user_sessions[target_user_id]:
            session_list = "\n".join([f"{name} - {'–ê–∫—Ç–∏–≤–Ω–∞' if session['active'] else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}"
                                     for name, session in user_sessions[target_user_id].items()])
            await update.message.reply_text(f"–°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}:\n{session_list}")
        else:
            await update.message.reply_text(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")
    
    # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    else:
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
        target_user_id = None
        for uid, sessions in user_sessions.items():
            if target in sessions:
                target_user_id = uid
                break

        if target_user_id is None:
            await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º {target} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session_list = "\n".join([f"{name} - {'–ê–∫—Ç–∏–≤–Ω–∞' if session['active'] else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}"
                                 for name, session in user_sessions[target_user_id].items()])
        await update.message.reply_text(f"–°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target} (ID: {target_user_id}):\n{session_list}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∏—Ç–æ–º—Ü–∞
async def stats(update: Update, context: CallbackContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /stats <–∏–º—è_—Å–µ—Å—Å–∏–∏>")
        return

    session_name = context.args[0]
    user_id = update.message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–µ—Å—Å–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_sessions or session_name not in user_sessions[user_id]:
        await update.message.reply_text(f"–°–µ—Å—Å–∏—è —Å –∏–º–µ–Ω–µ–º {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫—É–∫–∏ –∏–∑ —Å–µ—Å—Å–∏–∏
    cookies = user_sessions[user_id][session_name]["cookies"]

    # –ï—Å–ª–∏ cookies –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö –≤ —Å–ª–æ–≤–∞—Ä—å
    if isinstance(cookies, list):
        cookies_dict = {cookie['name']: cookie['value'] for cookie in cookies}
    else:
        cookies_dict = cookies

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async with ClientSession(cookie_jar=CookieJar()) as session:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—É–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        session.cookie_jar.update_cookies(cookies_dict)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∏—Ç–æ–º—Ü–∞
        stats = await fetch_pet_stats(session)

        # –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë
        if stats:
            await update.message.reply_text(stats)
        else:
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_name}.")

# –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∏—Ç–æ–º—Ü–∞
async def fetch_pet_stats(session: ClientSession):
    url = "https://mpets.mobi/profile"
    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è –ø–∏—Ç–æ–º—Ü–∞
        async with session.get(url) as response:
            if response.status != 200:
                return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è: {response.status}"

            page = await response.text()
            soup = BeautifulSoup(page, 'html.parser')

            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Ç–æ–º—Ü–µ
            stat_items = soup.find_all('div', class_='stat_item')

            if not stat_items:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–æ–º—Ü–µ
            pet_name = stat_items[0].find('a', class_='darkgreen_link')
            if not pet_name:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞."
            pet_name = pet_name.text.strip()

            pet_level = stat_items[0].text.split(' ')[-2]  # –£—Ä–æ–≤–µ–Ω—å –ø–∏—Ç–æ–º—Ü–∞

            experience = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
            for item in stat_items:
                if '–û–ø—ã—Ç:' in item.text:
                    experience = item.text.strip().split('–û–ø—ã—Ç:')[-1].strip()
                    break

            beauty = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
            for item in stat_items:
                if '–ö—Ä–∞—Å–æ—Ç–∞:' in item.text:
                    beauty = item.text.strip().split('–ö—Ä–∞—Å–æ—Ç–∞:')[-1].strip()
                    break

            coins = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
            for item in stat_items:
                if '–ú–æ–Ω–µ—Ç—ã:' in item.text:
                    coins = item.text.strip().split('–ú–æ–Ω–µ—Ç—ã:')[-1].strip()
                    break

            hearts = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
            for item in stat_items:
                if '–°–µ—Ä–¥–µ—á–∫–∏:' in item.text:
                    hearts = item.text.strip().split('–°–µ—Ä–¥–µ—á–∫–∏:')[-1].strip()
                    break

            vip_status = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
            for item in stat_items:
                if 'VIP-–∞–∫–∫–∞—É–Ω—Ç:' in item.text:
                    vip_status = item.text.strip().split('VIP-–∞–∫–∫–∞—É–Ω—Ç:')[-1].strip()
                    break

            stats = f"–ù–∏–∫–Ω–µ–π–º –∏ —É—Ä–æ–≤–µ–Ω—å: {pet_name}, {pet_level} —É—Ä–æ–≤–µ–Ω—å\n"
            stats += f"–û–ø—ã—Ç: {experience}\n–ö—Ä–∞—Å–æ—Ç–∞: {beauty}\n"
            stats += f"–ú–æ–Ω–µ—Ç—ã: {coins}\n–°–µ—Ä–¥–µ—á–∫–∏: {hearts}\n"
            stats += f"VIP-–∞–∫–∫–∞—É–Ω—Ç/–ü—Ä–µ–º–∏—É–º-–∞–∫–∫–∞—É–Ω—Ç: {vip_status}"

            return stats
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
async def auto_actions(session_data, session_name):
    # –í—Å–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    actions = [
        "https://mpets.mobi/?action=food",        # 1-—è —Å—Å—ã–ª–∫–∞
        "https://mpets.mobi/?action=play",        # 2-—è —Å—Å—ã–ª–∫–∞
        "https://mpets.mobi/show",                # 3-—è —Å—Å—ã–ª–∫–∞
        "https://mpets.mobi/glade_dig",           # 4-—è —Å—Å—ã–ª–∫–∞
        "https://mpets.mobi/show_coin_get",       # 5-—è —Å—Å—ã–ª–∫–∞ (–ø–µ—Ä–µ—Ö–æ–¥ –ø–æ 1 —Ä–∞–∑—É)
        "https://mpets.mobi/task_reward?id=46",    # 6-—è —Å—Å—ã–ª–∫–∞ (–ø–µ—Ä–µ—Ö–æ–¥ –ø–æ 1 —Ä–∞–∑—É)
        "https://mpets.mobi/task_reward?id=49",    # 7-—è —Å—Å—ã–ª–∫–∞ (–ø–µ—Ä–µ—Ö–æ–¥ –ø–æ 1 —Ä–∞–∑—É)
        "https://mpets.mobi/task_reward?id=52"     # 8-—è —Å—Å—ã–ª–∫–∞ (–ø–µ—Ä–µ—Ö–æ–¥ –ø–æ 1 —Ä–∞–∑—É)
    ]

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º cookies –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ session_data —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º
    if isinstance(session_data, list):
        cookies = {cookie['name']: cookie['value'] for cookie in session_data}
    else:
        cookies = session_data.get("cookies", {})

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é aiohttp —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º cookies
    cookie_jar = CookieJar()
    for cookie_name, cookie_value in cookies.items():
        cookie_jar.update_cookies({cookie_name: cookie_value})

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π ClientSession —Å –∫—É–∫–∏
    async with ClientSession(cookie_jar=cookie_jar) as session:
        while True:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞
            if asyncio.current_task().cancelled():
                logging.info(f"–ó–∞–¥–∞—á–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_name} –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                return  # –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞

            # –ü–µ—Ä–µ—Ö–æ–¥—ã –ø–æ –ø–µ—Ä–≤—ã–º —á–µ—Ç—ã—Ä—ë–º —Å—Å—ã–ª–∫–∞–º 6 —Ä–∞–∑ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –≤ 1 —Å–µ–∫—É–Ω–¥—É
            for action in actions[:4]:
                for _ in range(6):  # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ 6 —Ä–∞–∑
                    await visit_url(session, action, session_name)
                    await asyncio.sleep(1)

            # –ü–µ—Ä–µ—Ö–æ–¥—ã –ø–æ –æ—Å—Ç–∞–≤—à–∏–º—Å—è 4 —Å—Å—ã–ª–∫–∞–º 1 —Ä–∞–∑
            for action in actions[4:]:
                await visit_url(session, action, session_name)
                await asyncio.sleep(1)

            # –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ –¥—Ä—É–≥–∏–º —Å—Å—ã–ª–∫–∞–º —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º id –æ—Ç 10 –¥–æ 1
            for i in range(10, 0, -1):
                url = f"https://mpets.mobi/go_travel?id={i}"
                await visit_url(session, url, session_name)
                await asyncio.sleep(1)

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
            await asyncio.sleep(60)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º —Ü–∏–∫–ª–æ–º


            
async def visit_url(session, url, session_name):
    try:
        # –ó–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫—É–∫–∏
        async with session.get(url) as response:
            if response.status == 200:
                logging.info(f"[{session_name}] –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ {url} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
            else:
                logging.error(f"[{session_name}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ {url}: {response.status}")
    except Exception as e:
        logging.error(f"[{session_name}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    application = Application.builder().token(TOKEN).build()

    load_sessions()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add", add_session))
    application.add_handler(CommandHandler("del", remove_session))
    application.add_handler(CommandHandler("list", list_sessions))
    application.add_handler(CommandHandler("on", activate_session))
    application.add_handler(CommandHandler("off", deactivate_session))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("get_user", get_user))
    application.add_handler(CommandHandler("aon", activate_other_session))
    application.add_handler(CommandHandler("aoff", deactivate_other_session))
    application.add_handler(CommandHandler("get_list", get_user_sessions))

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã /info –∏ /guide
    application.add_handler(CommandHandler("info", info))
    application.add_handler(CommandHandler("guide", guide))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()  # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å event loop –≤ Jupyter –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å—Ä–µ–¥–∞—Ö, –≥–¥–µ –æ–Ω —É–∂–µ –∑–∞–ø—É—â–µ–Ω
    asyncio.get_event_loop().run_until_complete(main())
