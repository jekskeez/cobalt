import asyncio
import logging
import json
import os
import threading
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackContext
from aiohttp import ClientSession, CookieJar
from bs4 import BeautifulSoup
from flask import Flask, request, Response, redirect, session as flask_session
import requests

# –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
TOKEN = "7775307986:AAGJphxAEAma6ELYf2Xc_2ayozoVVALBRCY"

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π
USERS_FILE = "users.txt"

# –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (ID Telegram) –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
ALLOWED_USER_IDS = [1811568463, 630965641]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ—Å—Å–∏–π
user_sessions = {}        # —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {user_id: {session_name: {...}}}
user_tasks = {}           # –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ { (user_id, session_name): task }
pending_cookies = {}      # –∫—É–∫–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è {(user_id, session_name): cookies_dict}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è WebApp
app = Flask(__name__)
app.secret_key = os.getenv("FLASK_SECRET", "dev_secret")  # —Å–µ–∫—Ä–µ—Ç –¥–ª—è —Å–µ—Å—Å–∏–∏ Flask

# –ß—Ç–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∏–∑ —Ñ–∞–π–ª–∞
def read_from_file():
    if not os.path.exists(USERS_FILE):
        return []
    with open(USERS_FILE, "r") as file:
        lines = file.readlines()
    sessions = []
    for line in lines:
        session_data = line.strip().split(" | ")
        if len(session_data) != 4:
            logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–∞–π–ª–µ: {line.strip()}")
            continue
        try:
            cookies = json.loads(session_data[3])
        except json.JSONDecodeError:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON –¥–ª—è —Å–µ—Å—Å–∏–∏: {session_data[0]}")
            continue
        sessions.append({
            "session_name": session_data[0],
            "owner": session_data[1],
            "user_id": int(session_data[2]),
            "cookies": cookies
        })
    return sessions

# –ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –≤ —Ñ–∞–π–ª (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü)
def write_to_file(session_name, owner, user_id, cookies):
    with open(USERS_FILE, "a") as file:
        cookies_json = json.dumps(cookies)
        file.write(f"{session_name} | {owner} | {user_id} | {cookies_json}\n")
    logging.info(f"–°–µ—Å—Å–∏—è {session_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ñ–∞–π–ª.")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π –∏–∑ —Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
def load_sessions():
    global user_sessions
    sessions = read_from_file()
    for session in sessions:
        # –ï—Å–ª–∏ –∫—É–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—Å—å –∫–∞–∫ —Å–ø–∏—Å–æ–∫, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
        cookies = {cookie['name']: cookie['value'] for cookie in session["cookies"]} if isinstance(session["cookies"], list) else session["cookies"]
        user_sessions.setdefault(session["user_id"], {})[session["session_name"]] = {
            "owner": session["owner"],
            "cookies": cookies,
            "active": False
        }

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äì –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç Cobalt, —è —Å–æ–∑–¥–∞–Ω –¥–ª—è –∏–≥—Ä—ã –£–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ü–∏—Ç–æ–º—Ü—ã –Ω–∞ —Å–∞–π—Ç–µ mpets.mobi. –ë–ª–∞–≥–æ–¥–∞—Ä—è –º–Ω–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö) –Ω–∞ '–ø—Ä–æ–∫–∞—á–∫—É', —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –∏–≥—Ä—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n"
        "–í—Å–µ –¥–µ–ª–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: –ö–æ—Ä–º–ª–µ–Ω–∏–µ, –ò–≥—Ä–∞, –í—ã—Å—Ç–∞–≤–∫–∞, –ü—Ä–æ–≥—É–ª–∫–∞, –ü–æ–∏—Å–∫ —Å–µ–º—è–Ω.\n"
        "–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ: –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–∏—Ç–æ–º—Ü–∞ –≤ –±–æ—Ç–µ —Ç—Ä–µ–±—É—é—Ç—Å—è cookie. –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∏—Ö, —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –≤ /guide.\n\n"
        "–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/info ‚Äì –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
        "/guide ‚Äì –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é cookie\n"
        "/add ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é\n"
        "/del ‚Äì —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é\n"
        "/list ‚Äì –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏\n"
        "/on ‚Äì –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é\n"
        "/off ‚Äì –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é\n"
        "/stats <–∏–º—è_—Å–µ—Å—Å–∏–∏> ‚Äì –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∏—Ç–æ–º—Ü–∞"
    )

# –ö–æ–º–∞–Ω–¥–∞ /info ‚Äì –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ –∏ –∫–∞–Ω–∞–ª–µ
async def info(update: Update, context: CallbackContext):
    message = (
        "–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º: [t.me/bakhusse](https://t.me/bakhusse)\n"
        "–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª: [t.me/cobalt_mpets](https://t.me/cobalt_mpets)"
    )
    await update.message.reply_text(message, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /guide ‚Äì –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é cookie (–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è WebApp)
async def guide(update: Update, context: CallbackContext):
    message = (
        "–¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∏—Ç—å cookie –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram!\n"
        "–ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /add, —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.\n"
        "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–µ—Ä–Ω–∏—Å—å –≤ —á–∞—Ç –∏ –≤–≤–µ–¥–∏ /confirm –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏."
    )
    await update.message.reply_text(message)

# –ö–æ–º–∞–Ω–¥–∞ /add ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π WebApp –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
async def add_session(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã: —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–º—è —Å–µ—Å—Å–∏–∏
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add <–∏–º—è_—Å–µ—Å—Å–∏–∏>")
        return
    session_name = context.args[0]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_sessions and session_name in user_sessions[user_id]:
        await update.message.reply_text(f"–°–µ—Å—Å–∏—è —Å –∏–º–µ–Ω–µ–º `{session_name}` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", parse_mode='Markdown')
        return
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è WebApp (–º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
    tgid = user_id
    webapp_url = f"https://cobalt-t7qb.onrender.com/?tgid={tgid}&name={session_name}"
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    web_app_info = WebAppInfo(url=webapp_url)
    button = InlineKeyboardButton("üîë –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ MPets", web_app=web_app_info)
    keyboard = InlineKeyboardMarkup([[button]])
    await update.message.reply_text(
        f"–î–ª—è —Å–µ—Å—Å–∏–∏ *{session_name}* –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –≤–æ–π–¥–∏—Ç–µ –≤ MPets:",
        parse_mode='Markdown',
        reply_markup=keyboard
    )
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ '{session_name}' —á–µ—Ä–µ–∑ WebApp.")

# –ö–æ–º–∞–Ω–¥–∞ /confirm ‚Äì –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ WebApp
async def confirm_session(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    session_name = None
    cookies = None
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Å–µ—Å—Å–∏–∏ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫—É–∫–∏ –¥–ª—è –Ω–µ—ë
    if context.args:
        session_name = context.args[0]
        key = (user_id, session_name)
        cookies = pending_cookies.get(key)
        if not cookies:
            await update.message.reply_text(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Å—Å–∏–∏ `{session_name}`. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏.", parse_mode='Markdown')
            return
    else:
        # –ï—Å–ª–∏ –∏–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –Ω–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ä–æ–≤–Ω–æ –æ–¥–Ω–∞ –æ–∂–∏–¥–∞—é—â–∞—è —Å–µ—Å—Å–∏—è ‚Äì –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
        pending_for_user = [name for (uid, name) in pending_cookies.keys() if uid == user_id]
        if not pending_for_user:
            await update.message.reply_text("–ù–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–π. –°–Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /add.")
            return
        if len(pending_for_user) > 1:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–π –æ–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ /confirm <–∏–º—è_—Å–µ—Å—Å–∏–∏> –¥–ª—è –∫–∞–∂–¥–æ–π –∏–∑ –Ω–∏—Ö."
            )
            return
        # –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –æ–∂–∏–¥–∞—é—â–∞—è —Å–µ—Å—Å–∏—è
        session_name = pending_for_user[0]
        cookies = pending_cookies.get((user_id, session_name))
        if not cookies:
            await update.message.reply_text("–ö—É–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /add.")
            return
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –≤ user_sessions
    user_sessions.setdefault(user_id, {})
    if session_name in user_sessions[user_id]:
        # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–∏–º-—Ç–æ –ø—Ä–∏—á–∏–Ω–∞–º —Å–µ—Å—Å–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–Ω–∞–ø—Ä., –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
        await update.message.reply_text(f"–°–µ—Å—Å–∏—è `{session_name}` —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", parse_mode='Markdown')
        # –£–¥–∞–ª—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∫—É–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â—ë –µ—Å—Ç—å
        pending_cookies.pop((user_id, session_name), None)
        return
    user_sessions[user_id][session_name] = {
        "owner": update.message.from_user.username or "",
        "cookies": cookies,
        "active": False
    }
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –≤ —Ñ–∞–π–ª
    write_to_file(session_name, update.message.from_user.username or "", user_id, cookies)
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫—É–∫–∏
    pending_cookies.pop((user_id, session_name), None)
    await update.message.reply_text(f"–°–µ—Å—Å–∏—è *{session_name}* —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ—ë –∫–æ–º–∞–Ω–¥–æ–π /on.", parse_mode='Markdown')
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª —Å–µ—Å—Å–∏—é '{session_name}'.")

# –ö–æ–º–∞–Ω–¥–∞ /del ‚Äì —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é
async def remove_session(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /del <–∏–º—è_—Å–µ—Å—Å–∏–∏>")
        return
    session_name = context.args[0]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è —Å–µ—Å—Å–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_sessions and session_name in user_sessions[user_id]:
        session = user_sessions[user_id][session_name]
        if session["active"]:
            await update.message.reply_text(f"–°–µ—Å—Å–∏—è {session_name} –∞–∫—Ç–∏–≤–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π /off.")
            return
        # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –ø–∞–º—è—Ç–∏
        user_sessions[user_id].pop(session_name)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª, –∏—Å–∫–ª—é—á–∞—è —É–¥–∞–ª—ë–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
        sessions = read_from_file()
        new_sessions = [s for s in sessions if not (s['user_id'] == user_id and s['session_name'] == session_name)]
        with open(USERS_FILE, "w") as file:
            for s in new_sessions:
                cookies_json = json.dumps(s['cookies'])
                file.write(f"{s['session_name']} | {s['owner']} | {s['user_id']} | {cookies_json}\n")
        await update.message.reply_text(f"–°–µ—Å—Å–∏—è {session_name} —É–¥–∞–ª–µ–Ω–∞.")
        logging.info(f"–°–µ—Å—Å–∏—è {session_name} —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
    else:
        await update.message.reply_text(f"–°–µ—Å—Å–∏—è —Å –∏–º–µ–Ω–µ–º {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /list ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def list_sessions(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id in user_sessions and user_sessions[user_id]:
        sessions_list = "\n".join([f"‚Ä¢ {name} ({'–∞–∫—Ç–∏–≤–Ω–∞' if data['active'] else '–≤—ã–∫–ª—é—á–µ–Ω–∞'})" for name, data in user_sessions[user_id].items()])
        await update.message.reply_text(f"–í–∞—à–∏ —Å–µ—Å—Å–∏–∏:\n{sessions_list}")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")

# –ö–æ–º–∞–Ω–¥–∞ /on ‚Äì –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω—É –∏–ª–∏ –≤—Å–µ —Å–µ—Å—Å–∏–∏
async def activate_session(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /on <–∏–º—è_—Å–µ—Å—Å–∏–∏> –∏–ª–∏ /on all")
        return
    session_name = context.args[0]
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ "all", –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if session_name == "all":
        if user_id in user_sessions and user_sessions[user_id]:
            for name, session in user_sessions[user_id].items():
                if not session["active"]:
                    session["active"] = True
                    logging.info(f"–°–µ—Å—Å–∏—è {name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
                    task = asyncio.create_task(auto_actions(session["cookies"], name))
                    user_tasks[(user_id, name)] = task
            await update.message.reply_text("–í—Å–µ –≤–∞—à–∏ —Å–µ—Å—Å–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –∏ –∑–∞–ø—É—â–µ–Ω—ã!")
        else:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")
    else:
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
        if user_id in user_sessions and session_name in user_sessions[user_id]:
            if user_sessions[user_id][session_name]["active"]:
                await update.message.reply_text(f"–°–µ—Å—Å–∏—è {session_name} —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞.")
            else:
                user_sessions[user_id][session_name]["active"] = True
                task = asyncio.create_task(auto_actions(user_sessions[user_id][session_name]["cookies"], session_name))
                user_tasks[(user_id, session_name)] = task
                await update.message.reply_text(f"–°–µ—Å—Å–∏—è {session_name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
                logging.info(f"–°–µ—Å—Å–∏—è {session_name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        else:
            await update.message.reply_text(f"–°–µ—Å—Å–∏—è —Å –∏–º–µ–Ω–µ–º {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /off ‚Äì –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω—É –∏–ª–∏ –≤—Å–µ —Å–µ—Å—Å–∏–∏
async def deactivate_session(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /off <–∏–º—è_—Å–µ—Å—Å–∏–∏> –∏–ª–∏ /off all")
        return
    session_name = context.args[0]
    if session_name == "all":
        if user_id in user_sessions and user_sessions[user_id]:
            for name, session in user_sessions[user_id].items():
                if session["active"]:
                    session["active"] = False
                    task = user_tasks.get((user_id, name))
                    if task:
                        task.cancel()
                        user_tasks.pop((user_id, name), None)
                    logging.info(f"–°–µ—Å—Å–∏—è {name} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
            await update.message.reply_text("–í—Å–µ —Å–µ—Å—Å–∏–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.")
        else:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")
    else:
        if user_id in user_sessions and session_name in user_sessions[user_id]:
            if user_sessions[user_id][session_name]["active"]:
                user_sessions[user_id][session_name]["active"] = False
                task = user_tasks.get((user_id, session_name))
                if task:
                    task.cancel()
                    user_tasks.pop((user_id, session_name), None)
                await update.message.reply_text(f"–°–µ—Å—Å–∏—è {session_name} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
                logging.info(f"–°–µ—Å—Å–∏—è {session_name} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
            else:
                await update.message.reply_text(f"–°–µ—Å—Å–∏—è {session_name} —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω–∞.")
        else:
            await update.message.reply_text(f"–°–µ—Å—Å–∏—è —Å –∏–º–µ–Ω–µ–º {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /stats ‚Äì –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∏—Ç–æ–º—Ü–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
async def stats(update: Update, context: CallbackContext):
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /stats <–∏–º—è_—Å–µ—Å—Å–∏–∏>")
        return
    session_name = context.args[0]
    user_id = update.message.from_user.id
    if user_id not in user_sessions or session_name not in user_sessions[user_id]:
        await update.message.reply_text(f"–°–µ—Å—Å–∏—è —Å –∏–º–µ–Ω–µ–º {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    # –ü–æ–ª—É—á–∞–µ–º –∫—É–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
    cookies = user_sessions[user_id][session_name]["cookies"]
    cookies_dict = {cookie['name']: cookie['value'] for cookie in cookies} if isinstance(cookies, list) else cookies
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —Å–µ—Å—Å–∏—é aiohttp –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∫—É–∫–∏
    async with ClientSession(cookie_jar=CookieJar()) as session:
        session.cookie_jar.update_cookies(cookies_dict)
        stats_text = await fetch_pet_stats(session)
    if stats_text:
        await update.message.reply_text(stats_text)
    else:
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_name}.")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∏—Ç–æ–º—Ü–∞ —Å —Å–∞–π—Ç–∞
async def fetch_pet_stats(session: ClientSession):
    url = "https://mpets.mobi/profile"
    try:
        async with session.get(url) as response:
            if response.status != 200:
                return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è: {response.status}"
            page = await response.text()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return None
    soup = BeautifulSoup(page, 'html.parser')
    stat_items = soup.find_all('div', class_='stat_item')
    if not stat_items:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Ç–æ–º—Ü–µ
    pet_name_tag = stat_items[0].find('a', class_='darkgreen_link')
    if not pet_name_tag:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º—è –ø–∏—Ç–æ–º—Ü–∞."
    pet_name = pet_name_tag.text.strip()
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É—Ä–æ–≤–µ–Ω—å ‚Äì –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ –≤ –ø–µ—Ä–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ —Å—Ç–∞—Ç
    pet_level = stat_items[0].text.split()[-2] if stat_items[0].text else "N/A"
    experience = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
    beauty = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
    coins = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
    hearts = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
    for item in stat_items:
        text = item.text.strip()
        if '–û–ø—ã—Ç:' in text:
            experience = text.split('–û–ø—ã—Ç:')[-1].strip()
        if '–ö—Ä–∞—Å–æ—Ç–∞:' in text:
            beauty = text.split('–ö—Ä–∞—Å–æ—Ç–∞:')[-1].strip()
        if '–ú–æ–Ω–µ—Ç—ã:' in text:
            coins = text.split('–ú–æ–Ω–µ—Ç—ã:')[-1].strip()
        if '–°–µ—Ä–¥–µ—á–∫–∏:' in text:
            hearts = text.split('–°–µ—Ä–¥–µ—á–∫–∏:')[-1].strip()
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_text = (f"*{pet_name}* ‚Äî —É—Ä–æ–≤–µ–Ω—å {pet_level}\n"
                  f"–û–ø—ã—Ç: {experience}\n"
                  f"–ö—Ä–∞—Å–æ—Ç–∞: {beauty}\n"
                  f"–ú–æ–Ω–µ—Ç—ã: {coins}\n"
                  f"–°–µ—Ä–¥–µ—á–∫–∏: {hearts}")
    return stats_text

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ —Å–µ—Å—Å–∏–∏
async def get_user(update: Update, context: CallbackContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    user_id = update.message.from_user.id
    if user_id not in ALLOWED_USER_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /get_user <–∏–º—è_—Å–µ—Å—Å–∏–∏>")
        return

    session_name = context.args[0]

    session_info = read_from_file()
    for session in session_info:
        if session["session_name"] == session_name:
            response = f"–°–µ—Å—Å–∏—è: {session_name}\n"
            response += f"–í–ª–∞–¥–µ–ª–µ—Ü: {session['owner']}\n"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—É–∫–∏ –∫–∞–∫ —Å–∫—Ä—ã—Ç—ã–π –±–ª–æ–∫
            cookies = json.dumps(session['cookies'], indent=4)  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—É–∫–∏ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            hidden_cookies = f"```json\n{cookies}```"  # –°–∫—Ä—ã–≤–∞–µ–º –∫—É–∫–∏ –≤ –±–ª–æ–∫–µ, –¥–æ—Å—Ç—É–ø–Ω–æ–º –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è

            response += f"–ö—É–∫–∏:\n {hidden_cookies}"  # –î–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É —Å –∫—É–∫–∞–º–∏

            await send_message(update, response)
            return

    await update.message.reply_text(f"–°–µ—Å—Å–∏—è —Å –∏–º–µ–Ω–µ–º {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π (–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ –ø–∏—Ç–æ–º—Ü–∞)
async def auto_actions(session_cookies, session_name):
    # URL-–∞–¥—Ä–µ—Å–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    actions = [
        "https://mpets.mobi/?action=food",
        "https://mpets.mobi/?action=play",
        "https://mpets.mobi/show",
        "https://mpets.mobi/glade_dig",
        "https://mpets.mobi/show_coin_get",
        "https://mpets.mobi/task_reward?id=46",
        "https://mpets.mobi/task_reward?id=49",
        "https://mpets.mobi/task_reward?id=52"
    ]
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å cookies (–µ—Å–ª–∏ —Ö—Ä–∞–Ω–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤)
    cookies_dict = {c['name']: c['value'] for c in session_cookies} if isinstance(session_cookies, list) else (session_cookies.get("cookies", {}) if "cookies" in session_cookies else session_cookies)
    # –°–æ–∑–¥–∞—ë–º aiohttp-—Å–µ—Å—Å–∏—é —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ cookie
    cookie_jar = CookieJar()
    for name, value in cookies_dict.items():
        cookie_jar.update_cookies({name: value})
    async with ClientSession(cookie_jar=cookie_jar) as web_session:
        while True:
            if asyncio.current_task().cancelled():
                logging.info(f"–ê–≤—Ç–æ–∑–∞–¥–∞—á–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_name} –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                return
            # –ü–µ—Ä–≤—ã–µ 4 –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–≤—Ç–æ—Ä—è–µ–º 6 —Ä–∞–∑ —Å –ø–∞—É–∑–æ–π 1 —Å–µ–∫
            for action_url in actions[:4]:
                for _ in range(6):
                    await visit_url(web_session, action_url, session_name)
                    await asyncio.sleep(1)
            # –û—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ 1 —Ä–∞–∑—É
            for action_url in actions[4:]:
                await visit_url(web_session, action_url, session_name)
                await asyncio.sleep(1)
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º id –æ—Ç 10 –¥–æ 1
            for i in range(10, 0, -1):
                url = f"https://mpets.mobi/go_travel?id={i}"
                await visit_url(web_session, url, session_name)
                await asyncio.sleep(1)
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (60 —Å–µ–∫—É–Ω–¥)
            await asyncio.sleep(60)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è GET-–∑–∞–ø—Ä–æ—Å–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
async def visit_url(web_session, url, session_name):
    try:
        async with web_session.get(url) as response:
            if response.status == 200:
                logging.info(f"[{session_name}] –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ {url} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
            else:
                logging.error(f"[{session_name}] –û—à–∏–±–∫–∞ {response.status} –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ {url}.")
    except Exception as e:
        logging.error(f"[{session_name}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {url}: {e}")

# Flask –º–∞—Ä—à—Ä—É—Ç: –∫–æ—Ä–Ω–µ–≤–æ–π ‚Äì –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ MPets
@app.route('/')
def webapp_root():
    tgid = request.args.get("tgid")
    session_name = request.args.get("name")
    if not tgid or not session_name:
        return "–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã tgid –∏–ª–∏ name –≤ URL.", 400
    try:
        flask_session['tgid'] = int(tgid)
    except ValueError:
        return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram.", 400
    flask_session['session_name'] = session_name
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ–∫—Å–∏-—Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ MPets
    return redirect("/welcome")

# Flask –º–∞—Ä—à—Ä—É—Ç: –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ mpets.mobi (–ª–æ–≥–∏–Ω —á–µ—Ä–µ–∑ WebApp)
@app.route('/', defaults={'url_path': ''}, methods=['GET', 'POST'])
@app.route('/<path:url_path>', methods=['GET', 'POST'])
def proxy_mpets(url_path):
    target_url = f"https://mpets.mobi/{url_path}"
    method = request.method
    headers = {key: value for key, value in request.headers if key.lower() != 'host'}
    cookies = request.cookies
    try:
        if method == 'POST':
            resp = requests.post(target_url, data=request.form, headers=headers, cookies=cookies, allow_redirects=False)
        else:
            resp = requests.get(target_url, headers=headers, cookies=cookies, allow_redirects=False)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏-–∑–∞–ø—Ä–æ—Å–∞ –∫ {target_url}: {e}")
        return "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å MPets.", 502

    if url_path.lower() == "login" and resp.status_code in (301, 302):
        tgid = flask_session.get("tgid")
        session_name = flask_session.get("session_name")
        if tgid and session_name:
            pending_cookies[(tgid, session_name)] = resp.cookies.get_dict()
            logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –∫—É–∫–∏ –¥–ª—è user_id={tgid}, session='{session_name}'. –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ /confirm.")
        return (
            "<html><body style='text-align:center; font-family:Arial,sans-serif;'>"
            "<h2>‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</h2>"
            "<p>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –æ–∫–Ω–æ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–æ—Ç.<br>"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/confirm</b> –≤ —á–∞—Ç–µ, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é.</p>"
            "<button onclick=\"window.close()\" style='padding:10px 20px; font-size:16px; cursor:pointer;'>–ó–∞–∫—Ä—ã—Ç—å</button>"
            "</body></html>"
        )

    excluded_headers = ['content-encoding', 'transfer-encoding', 'content-length', 'connection']
    response = Response(resp.content, status=resp.status_code)
    for header, value in resp.headers.items():
        if header.lower() not in (h.lower() for h in excluded_headers):
            response.headers[header] = value
    return response

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞
async def main_bot():
    app_tg = Application.builder().token(TOKEN).build()
    load_sessions()
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    app_tg.add_handler(CommandHandler("start", start))
    app_tg.add_handler(CommandHandler("info", info))
    app_tg.add_handler(CommandHandler("guide", guide))
    app_tg.add_handler(CommandHandler("add", add_session))
    app_tg.add_handler(CommandHandler("confirm", confirm_session))
    app_tg.add_handler(CommandHandler("del", remove_session))
    app_tg.add_handler(CommandHandler("list", list_sessions))
    app_tg.add_handler(CommandHandler("on", activate_session))
    app_tg.add_handler(CommandHandler("off", deactivate_session))
    app_tg.add_handler(CommandHandler("stats", fetch_pet_stats))
    app_tg.add_handler(CommandHandler("get_user", get_user))
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
    app_tg.add_handler(CommandHandler("aon", activate_session))   # –≤–æ–∑–º–æ–∂–Ω–æ, –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç—Å—è —Å /on
    app_tg.add_handler(CommandHandler("aoff", deactivate_session))  # –≤–æ–∑–º–æ–∂–Ω–æ, –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç—Å—è —Å /off
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–¥–æ–≤–æ–ª—å–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω—ã–π, –ø–æ–∫–∞ –±–æ—Ç –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
    await app_tg.run_polling()

# –ó–∞–ø—É—Å–∫ Flask –∏ Telegram –±–æ—Ç–∞ –≤ –æ–¥–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    port = int(os.environ.get('PORT', 5000))
    flask_thread = threading.Thread(target=lambda: app.run(host="0.0.0.0", port=port, debug=False, use_reloader=False))
    flask_thread.daemon = True
    flask_thread.start()
    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main_bot())
